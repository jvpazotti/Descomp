RESTART:
LDI R0, $0#InÃ­cio do Setup
STA R0, @288#Zerando hexas
STA R0, @289
STA R0, @290
STA R0, @291
STA R0, @292
STA R0, @293
STA R0, @256#Zerando leds
STA R0, @257
STA R0, @258
STA R0, @0#Armazenando 0 em unidade, dezena, centena, etc
STA R0, @1
STA R0, @2
STA R0, @3
STA R0, @4
STA R0, @5
STA R0, @6#Constante de comparacao (0)
STA R0, @15#Flag que para contagem
STA R0, @510
STA R0, @511
STA R0, @509
LDI R0, $1
STA R0, @7#Constante de Incremento (1)
LDI R0, $10
STA R0, @8#Constante de limite no display (10)
LDI R0, $0
STA R0, @9#Limite de contagem em unidade, dezena, centena, etc
STA R0, @10
STA R0, @11
STA R0, @12
STA R0, @13
STA R0, @14
LDI R0, $9
STA R0, @16#Constante de limite de valor
LDI R0, $5
STA R0, @17#Constante de limite de valor de minutos e segundos
LDI R0, $3
STA R0, @18#Constante de limite de valor de horas1
LDI R0, $2
STA R0, @19#Constante de limite de valor de horas2
LDI R0, $6
STA R0, @20
LDI R0, $4
STA R0, @21
LDI R0, $0
STA R0, @22
INICIOLOOP:#Loop principal
INCREMENTADOR:# Incrementa ate chegar no limite de contagem
LDA R2, @352# Le o valor de KEY0
CEQ R2, @6# Compara o valor de KEY0 com 0
JEQ @PULA1# Se for igual a 0, nao incrementa e atualiza os displays
INCREMENTA:
STA R2, @511#Limpa a leitura de KEY1
UNIDADE:
LDA R2, @0#Carrega o valor da unidade no acumulador
SOMA R2, @7#Incrementa 1 na unidade
CEQ R2, @8#Compara unidade com 10
JEQ @UNIDADEPASSOU#Se for igual a 10, incrementa a dezena
STA R2, @0#Se for diferente de 10, armazena o valor da unidade
JMP @INICIOLOOP#Retorna para o LOOP principal
UNIDADEPASSOU:
LDA R2, @6#Carrega 0 no acumulador
STA R2, @0#Zera a unidade
LDA R2, @1#Carrega o valor da dezena no acumulador
SOMA R2, @7#Incrementa 1 na dezena 
CEQ R2, @17#Compara dezena com 6
JEQ R2, @DEZENAPASSOU#Se for igual a 6, incrementa a centena
STA R2, @1#Se for diferente de 6, armazena o valor da dezena
JMP @INICIOLOOP#Retorna para o LOOP principal
DEZENAPASSOU:
LDA R2, @6#Carrega 0 no acumulador
STA R2, @1#Zera a dezena
LDA R2, @2#Carrega o valor da centena no acumulador
SOMA R2, @7#Incrementa 1 na centena
CEQ R2, @8#Compara centena com 10
JEQ @CENTENAPASSOU#Se for igual a 10, incrementa a unidade de milhar
STA R2, @2#Se for diferente de 10, armazena o valor da centena
JMP @INICIOLOOP#Retorna para o LOOP principal
CENTENAPASSOU:
LDA R2, @6#Carrega 0 no acumulador
STA R2, @2#Zera a centena
LDA R2, @3#Carrega o valor da unidade de milhar no acumulador
SOMA R2, @7#Incrementa 1 na unidade de milhar
CEQ R2, @20#Compara unidade de milhar com 6
JEQ @UNIDADEMILHARPASSOU#Se for igual a 6, incrementa a dezena de milhar
STA R2, @3#Se for diferente de 6, armazena o valor da unidade de milhar
JMP @INICIOLOOP#Retorna para o LOOP principal
UNIDADEMILHARPASSOU:
LDA R2, @6#Carrega 0 no acumulador
STA R2, @3#Zera a unidade de milhar
LDA R2, @22#Carrega a flag de hora certa
CEQ R2, @7#Compara a flag com 1
JEQ @HORACERTADEZENAMILHAR#Se for igual a 1, incrementa a dezena de milhar
LDA R2, @4#Carrega o valor da dezena de milhar no acumulador
SOMA R2, @7#Incrementa 1 na dezena de milhar
CEQ R2, @8#Compara dezena de milhar com 10
JEQ @DEZENAMILHARPASSOU#Se for igual a 10, incrementa a centena de milhar
STA R2, @4#Se for diferente de 10, armazena o valor da dezena de milhar
JMP @INICIOLOOP#Retorna para o LOOP principal
HORACERTADEZENAMILHAR:
LDA R2, @4#Carrega o valor da dezena de milhar no acumulador
SOMA R2, @7#Incrementa 1 na dezena de milhar
CEQ R2, @21#Compara dezena de milhar com 3
JEQ @DEZENAMILHARPASSOU#Se for igual a 3, incrementa a centena de milhar
STA R2, @4#Se for diferente de 3, armazena o valor da dezena de milhar
JMP @INICIOLOOP#Retorna para o LOOP principal
DEZENAMILHARPASSOU:
LDA R2, @22#Flag de centena de milhar em 2
CEQ R2, @7# 0-> primeira vez que passa por aqui, 1-> segunda vez que passa por aqui
JEQ @CENTENAMILHARPASSOU
LDA R2, @6#Carrega 0 no acumulador
STA R2, @4#Zera a dezena de milhar
LDA R2, @5#Carrega o valor da centena de milhar no acumulador
SOMA R2, @7#Incrementa 1 na centena de milhar
CEQ R2, @19#Compara centena de milhar com 2
JEQ @CONTINUACONT#Se for igual a 2, continua a contagem ate o valor da dezena de milhar bater 3
STA R2, @5#Se for diferente de 2, armazena o valor da centena de milhar
JMP @INICIOLOOP#Retorna para o LOOP principal
CENTENAMILHARPASSOU:
JSR @ZERADISPLAY
JMP @RESTART#Retorna para o LOOP principal
ATUALIZA:#Atualiza os valores dos HEX
LDA R3, @0#Le o valor das unidades
STA R3, @288#Armazena o valor das unidades no HEX0
LDA R3, @1#Le o valor das dezenas
STA R3, @289#Armazena o valor das dezenas no HEX1
LDA R3, @2#Le o valor das centenas
STA R3, @290#Armazena o valor das centenas no HEX2
LDA R3, @3#Le o valor das unidades de milhar
STA R3, @291#Armazena o valor das unidades de milhar no HEX3
LDA R3, @4#Le o valor das dezenas de milhar
STA R3, @292#Armazena o valor das dezenas de milhar no HEX4
LDA R3, @5#Le o valor das centenas de milhar
STA R3, @293#Armazena o valor das centenas de milhar no HEX5
RET#Retorna para o LOOP principal
CONTINUACONT:
STA R2, @5
LDA R3, @0#Le o valor das unidades
STA R3, @288#Armazena o valor das unidades no HEX0
LDA R3, @1#Le o valor das dezenas
STA R3, @289#Armazena o valor das dezenas no HEX1
LDA R3, @2#Le o valor das centenas
STA R3, @290#Armazena o valor das centenas no HEX2
LDA R3, @3#Le o valor das unidades de milhar
STA R3, @291#Armazena o valor das unidades de milhar no HEX3
LDA R3, @4#Le o valor das dezenas de milhar
STA R3, @292#Armazena o valor das dezenas de milhar no HEX4
LDA R3, @5#Le o valor das centenas de milhar
STA R3, @293#Armazena o valor das centenas de milhar no HEX5
LDI R3, $1
STA R3, @22
JMP @INCREMENTA
PULA1:
JSR @ATUALIZA# Atualiza os displays
JMP @INCREMENTADOR# Volta para o loop principal
ZERADISPLAY:
LDA R0, @6#Carrega 0 no acumulador
STA R0, @288# Zera o HEX1
STA R0, @289# Zera o HEX2
STA R0, @290# Zera o HEX3
STA R0, @291# Zera o HEX4
STA R0, @292# Zera o HEX5
STA R0, @293# Zera o HEX6
STA R0, @256# Zera os LEDS(7~0)
STA R0, @258# Zera os LED(9)
STA R0, @257# Zera os LED(8) # Zera os displays depois de configurar os limites
RET