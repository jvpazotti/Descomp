tmp(0) := NOP & '0' & x"00";	-- NOP 
tmp(1) := LDI & '0' & x"00";	-- LDI $0    	#InÃ­cio do Setup
tmp(2) := STA & '1' & x"20";	-- STA @288    	#Zerando hexas
tmp(3) := STA & '1' & x"21";	-- STA @289
tmp(4) := STA & '1' & x"22";	-- STA @290
tmp(5) := STA & '1' & x"23";	-- STA @291
tmp(6) := STA & '1' & x"24";	-- STA @292
tmp(7) := STA & '1' & x"25";	-- STA @293
tmp(8) := STA & '1' & x"00";	-- STA @256    	#Zerando leds
tmp(9) := STA & '1' & x"01";	-- STA @257
tmp(10) := STA & '1' & x"02";	-- STA @258
tmp(11) := STA & '0' & x"00";	-- STA @0    	#Armazenando 0 em unidade, dezena, centena, etc
tmp(12) := STA & '0' & x"01";	-- STA @1
tmp(13) := STA & '0' & x"02";	-- STA @2
tmp(14) := STA & '0' & x"03";	-- STA @3
tmp(15) := STA & '0' & x"04";	-- STA @4
tmp(16) := STA & '0' & x"05";	-- STA @5
tmp(17) := STA & '0' & x"06";	-- STA @6    	#Constante de comparacao (0)
tmp(18) := STA & '0' & x"0F";	-- STA @15   	#Flag que para contagem
tmp(19) := STA & '1' & x"FE";	-- STA @510
tmp(20) := STA & '1' & x"FF";	-- STA @511
tmp(21) := STA & '1' & x"FD";	-- STA @509
tmp(22) := LDI & '0' & x"01";	-- LDI $1
tmp(23) := STA & '0' & x"07";	-- STA @7    	#Constante de Incremento (1)
tmp(24) := LDI & '0' & x"0A";	-- LDI $10
tmp(25) := STA & '0' & x"08";	-- STA @8    	#Constante de limite no display (10)
tmp(26) := LDI & '0' & x"00";	-- LDI $0
tmp(27) := STA & '0' & x"09";	-- STA @9    	#Limite de contagem em unidade, dezena, centena, etc
tmp(28) := STA & '0' & x"0A";	-- STA @10  
tmp(29) := STA & '0' & x"0B";	-- STA @11
tmp(30) := STA & '0' & x"0C";	-- STA @12
tmp(31) := STA & '0' & x"0D";	-- STA @13
tmp(32) := STA & '0' & x"0E";	-- STA @14
tmp(33) := LDI & '0' & x"0B";	-- LDI $11
tmp(34) := STA & '0' & x"10";	-- STA @16   	#Constante de limite de contagem (11)
tmp(35) := LDI & '0' & x"0C";	-- LDI $12
tmp(36) := STA & '0' & x"11";	-- STA @17   	#Constante de limite de contagem (12)
tmp(37) := LDI & '0' & x"0D";	-- LDI $13
tmp(38) := STA & '0' & x"12";	-- STA @18   	#Constante de limite de contagem (13)
tmp(39) := LDI & '0' & x"0E";	-- LDI $14
tmp(40) := STA & '0' & x"13";	-- STA @19   	#Constante de limite de contagem (14)
tmp(41) := LDI & '0' & x"0F";	-- LDI $15 
tmp(42) := STA & '0' & x"14";	-- STA @20   	#Constante de limite de contagem (15)
tmp(43) := LDI & '0' & x"00";	-- LDI $0
tmp(44) := STA & '0' & x"15";	-- STA @21   	#Constante de limite de contagem (0)
tmp(45) := NOP & '0' & x"00";	-- NOP  	#Loop principal
tmp(46) := LDA & '1' & x"61";	-- LDA @353 	# Le o valor de KEY1
tmp(47) := CEQ & '0' & x"06";	-- CEQ @6 	# Compara o valor de KEY1 com 0
tmp(48) := JEQ & '0' & x"2E";	-- JEQ @INICIOLOOP 	# Se for igual a 0, fica no aguardo para quando for 1
tmp(49) := JSR & '0' & x"49";	-- JSR @CONFIGLIMITE 	# Se for diferente de 0, entra na sub rotina de configuracao de Limite
tmp(50) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(51) := STA & '1' & x"20";	-- STA @288 	# Zera o HEX1
tmp(52) := STA & '1' & x"21";	-- STA @289 	# Zera o HEX2
tmp(53) := STA & '1' & x"22";	-- STA @290 	# Zera o HEX3
tmp(54) := STA & '1' & x"23";	-- STA @291 	# Zera o HEX4
tmp(55) := STA & '1' & x"24";	-- STA @292 	# Zera o HEX5
tmp(56) := STA & '1' & x"25";	-- STA @293 	# Zera o HEX6
tmp(57) := STA & '1' & x"00";	-- STA @256 	# Zera os LEDS(7~0)
tmp(58) := STA & '1' & x"02";	-- STA @258 	# Zera os LED(9)
tmp(59) := STA & '1' & x"01";	-- STA @257 	# Zera os LED(8) 
tmp(60) := NOP & '0' & x"00";	-- NOP  	# Incrementa ate chegar no limite de contagem
tmp(61) := LDA & '1' & x"60";	-- LDA @352 	# Le o valor de KEY0
tmp(62) := CEQ & '0' & x"06";	-- CEQ @6   	# Compara o valor de KEY0 com 0
tmp(63) := JEQ & '0' & x"42";	-- JEQ @PULA1 	# Se for igual a 0, nao incrementa e atualiza os displays
tmp(64) := JSR & '0' & x"DE";	-- JSR @INCREMENTA 	# Se for diferente de 0, entra na sub rotina de incremento
tmp(65) := NOP & '0' & x"00";	-- NOP 
tmp(66) := JSR & '1' & x"1B";	-- JSR @ATUALIZA 	# Atualiza os displays
tmp(67) := JSR & '1' & x"29";	-- JSR @CHECALIMITE 	# Checa pra ver se passou do limite setado
tmp(68) := LDA & '0' & x"0F";	-- LDA @15 	# Le o valor da flag de inibir contagem
tmp(69) := CEQ & '0' & x"06";	-- CEQ @6 	# Compara com 0 a flag (flag com valor 1 -> ativa, flag com valor 0 -> desativada)
tmp(70) := JEQ & '0' & x"3D";	-- JEQ @INCREMENTADOR 	#Se a flag for 0, pode continuar incrementando
tmp(71) := JMP & '1' & x"4C";	-- JMP @TRAVA 	# Se for 1, trava a contagem
tmp(72) := NOP & '0' & x"00";	-- NOP  	#Rotina de configuracao de limite
tmp(73) := LDI & '0' & x"01";	-- LDI $1 	# Carrega o valor 1
tmp(74) := STA & '1' & x"00";	-- STA @256 	# Bota no endereco dos LEDS(7-0)
tmp(75) := STA & '1' & x"FE";	-- STA @510 	#Limpa a leitura de KEY1
tmp(76) := NOP & '0' & x"00";	-- NOP 
tmp(77) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(78) := CEQ & '0' & x"08";	-- CEQ @8 	#Compara com 10
tmp(79) := JEQ & '1' & x"53";	-- JEQ @DISPLAYATUALIZADO0
tmp(80) := CEQ & '0' & x"10";	-- CEQ @16 	#Compara com 11
tmp(81) := JEQ & '1' & x"53";	-- JEQ @DISPLAYATUALIZADO0
tmp(82) := CEQ & '0' & x"11";	-- CEQ @17 	#Compara com 12
tmp(83) := JEQ & '1' & x"53";	-- JEQ @DISPLAYATUALIZADO0
tmp(84) := CEQ & '0' & x"12";	-- CEQ @18 	#Compara com 13
tmp(85) := JEQ & '1' & x"53";	-- JEQ @DISPLAYATUALIZADO0
tmp(86) := CEQ & '0' & x"13";	-- CEQ @19 	#Compara com 14
tmp(87) := JEQ & '1' & x"53";	-- JEQ @DISPLAYATUALIZADO0
tmp(88) := CEQ & '0' & x"14";	-- CEQ @20 	#Compara com 15
tmp(89) := JEQ & '1' & x"53";	-- JEQ @DISPLAYATUALIZADO0
tmp(90) := NOP & '0' & x"00";	-- NOP 
tmp(91) := STA & '1' & x"20";	-- STA @288 	# Hex 0
tmp(92) := LDA & '1' & x"61";	-- LDA @353 	# Le KEY1
tmp(93) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara KEY1 com 0
tmp(94) := JEQ & '0' & x"4D";	-- JEQ @ESPERAUNIDADE  	#Se for 0, ou seja, nao esta apertado, espera ate apertar
tmp(95) := STA & '1' & x"FE";	-- STA @510 	#Limpa a leitura de KEY1
tmp(96) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(97) := STA & '0' & x"09";	-- STA @9   	#Armazena o valor das chaves no limite das unidades
tmp(98) := NOP & '0' & x"00";	-- NOP 
tmp(99) := LDI & '0' & x"04";	-- LDI $4 	#Carrega o valor 4
tmp(100) := STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(101) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(102) := CEQ & '0' & x"08";	-- CEQ @8 	#Compara com 10
tmp(103) := JEQ & '1' & x"56";	-- JEQ @DISPLAYATUALIZADO1
tmp(104) := CEQ & '0' & x"10";	-- CEQ @16 	#Compara com 11
tmp(105) := JEQ & '1' & x"56";	-- JEQ @DISPLAYATUALIZADO1
tmp(106) := CEQ & '0' & x"11";	-- CEQ @17 	#Compara com 12
tmp(107) := JEQ & '1' & x"56";	-- JEQ @DISPLAYATUALIZADO1
tmp(108) := CEQ & '0' & x"12";	-- CEQ @18 	#Compara com 13
tmp(109) := JEQ & '1' & x"56";	-- JEQ @DISPLAYATUALIZADO1
tmp(110) := CEQ & '0' & x"13";	-- CEQ @19 	#Compara com 14
tmp(111) := JEQ & '1' & x"56";	-- JEQ @DISPLAYATUALIZADO1
tmp(112) := CEQ & '0' & x"14";	-- CEQ @20 	#Compara com 15
tmp(113) := JEQ & '1' & x"56";	-- JEQ @DISPLAYATUALIZADO1
tmp(114) := NOP & '0' & x"00";	-- NOP 
tmp(115) := STA & '1' & x"21";	-- STA @289 	# Hex 1
tmp(116) := LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(117) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1 
tmp(118) := JEQ & '0' & x"63";	-- JEQ @ESPERADEZENA 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(119) := STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(120) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(121) := STA & '0' & x"0A";	-- STA @10 	#Armazena o valor das chaves no limte das dezenas
tmp(122) := NOP & '0' & x"00";	-- NOP 
tmp(123) := LDI & '0' & x"10";	-- LDI $16 	# Carrega o valor 16 no acumulador
tmp(124) := STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(125) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(126) := CEQ & '0' & x"08";	-- CEQ @8 	#Compara com 10
tmp(127) := JEQ & '1' & x"59";	-- JEQ @DISPLAYATUALIZADO2
tmp(128) := CEQ & '0' & x"10";	-- CEQ @16 	#Compara com 11
tmp(129) := JEQ & '1' & x"59";	-- JEQ @DISPLAYATUALIZADO2
tmp(130) := CEQ & '0' & x"11";	-- CEQ @17 	#Compara com 12
tmp(131) := JEQ & '1' & x"59";	-- JEQ @DISPLAYATUALIZADO2
tmp(132) := CEQ & '0' & x"12";	-- CEQ @18 	#Compara com 13
tmp(133) := JEQ & '1' & x"59";	-- JEQ @DISPLAYATUALIZADO2
tmp(134) := CEQ & '0' & x"13";	-- CEQ @19 	#Compara com 14
tmp(135) := JEQ & '1' & x"59";	-- JEQ @DISPLAYATUALIZADO2
tmp(136) := CEQ & '0' & x"14";	-- CEQ @20 	#Compara com 15
tmp(137) := JEQ & '1' & x"59";	-- JEQ @DISPLAYATUALIZADO2
tmp(138) := NOP & '0' & x"00";	-- NOP 
tmp(139) := STA & '1' & x"22";	-- STA @290 	# Hex 2
tmp(140) := LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(141) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1 
tmp(142) := JEQ & '0' & x"7B";	-- JEQ @ESPERACENTENA 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(143) := STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(144) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(145) := STA & '0' & x"0B";	-- STA @11 	#Armazena o valor das chaves no limite das centenas
tmp(146) := NOP & '0' & x"00";	-- NOP 
tmp(147) := LDI & '0' & x"20";	-- LDI $32 	# Carrega o valor 32 no acumulador
tmp(148) := STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(149) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(150) := CEQ & '0' & x"08";	-- CEQ @8 	#Compara com 10
tmp(151) := JEQ & '1' & x"5C";	-- JEQ @DISPLAYATUALIZADO3
tmp(152) := CEQ & '0' & x"10";	-- CEQ @16 	#Compara com 11
tmp(153) := JEQ & '1' & x"5C";	-- JEQ @DISPLAYATUALIZADO3
tmp(154) := CEQ & '0' & x"11";	-- CEQ @17 	#Compara com 12
tmp(155) := JEQ & '1' & x"5C";	-- JEQ @DISPLAYATUALIZADO3
tmp(156) := CEQ & '0' & x"12";	-- CEQ @18 	#Compara com 13
tmp(157) := JEQ & '1' & x"5C";	-- JEQ @DISPLAYATUALIZADO3
tmp(158) := CEQ & '0' & x"13";	-- CEQ @19 	#Compara com 14
tmp(159) := JEQ & '1' & x"5C";	-- JEQ @DISPLAYATUALIZADO3
tmp(160) := CEQ & '0' & x"14";	-- CEQ @20 	#Compara com 15
tmp(161) := JEQ & '1' & x"5C";	-- JEQ @DISPLAYATUALIZADO3
tmp(162) := NOP & '0' & x"00";	-- NOP 
tmp(163) := STA & '1' & x"23";	-- STA @291 	# Hex 3
tmp(164) := LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(165) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1
tmp(166) := JEQ & '0' & x"93";	-- JEQ @ESPERAUNIDADEMILHAR 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(167) := STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(168) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(169) := STA & '0' & x"0C";	-- STA @12 	#Armazena o valor das chaves no limite das unidades de milhar
tmp(170) := NOP & '0' & x"00";	-- NOP 
tmp(171) := LDI & '0' & x"80";	-- LDI $128 	# Carrega o valor 128 no acumulador
tmp(172) := STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(173) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(174) := CEQ & '0' & x"08";	-- CEQ @8 	#Compara com 10
tmp(175) := JEQ & '1' & x"5F";	-- JEQ @DISPLAYATUALIZADO4
tmp(176) := CEQ & '0' & x"10";	-- CEQ @16 	#Compara com 11
tmp(177) := JEQ & '1' & x"5F";	-- JEQ @DISPLAYATUALIZADO4
tmp(178) := CEQ & '0' & x"11";	-- CEQ @17 	#Compara com 12
tmp(179) := JEQ & '1' & x"5F";	-- JEQ @DISPLAYATUALIZADO4
tmp(180) := CEQ & '0' & x"12";	-- CEQ @18 	#Compara com 13
tmp(181) := JEQ & '1' & x"5F";	-- JEQ @DISPLAYATUALIZADO4
tmp(182) := CEQ & '0' & x"13";	-- CEQ @19 	#Compara com 14
tmp(183) := JEQ & '1' & x"5F";	-- JEQ @DISPLAYATUALIZADO4
tmp(184) := CEQ & '0' & x"14";	-- CEQ @20 	#Compara com 15
tmp(185) := JEQ & '1' & x"5F";	-- JEQ @DISPLAYATUALIZADO4
tmp(186) := NOP & '0' & x"00";	-- NOP 
tmp(187) := STA & '1' & x"24";	-- STA @292 	# Hex 4
tmp(188) := LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(189) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1 
tmp(190) := JEQ & '0' & x"AB";	-- JEQ @ESPERADEZENAMILHAR 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(191) := STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(192) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(193) := STA & '0' & x"0D";	-- STA @13 	#Armazena o valor das chaves no limite das dezenas de milhar
tmp(194) := NOP & '0' & x"00";	-- NOP 
tmp(195) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(196) := STA & '1' & x"00";	-- STA @256 	# Zera o valor nos LEDS(7~0)
tmp(197) := LDI & '0' & x"01";	-- LDI $1 	# Carrega o valor 1 no acumulador
tmp(198) := STA & '1' & x"01";	-- STA @257 	# Bota o valor nos LEDS
tmp(199) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(200) := CEQ & '0' & x"08";	-- CEQ @8 	#Compara com 10
tmp(201) := JEQ & '1' & x"62";	-- JEQ @DISPLAYATUALIZADO5
tmp(202) := CEQ & '0' & x"10";	-- CEQ @16 	#Compara com 11
tmp(203) := JEQ & '1' & x"62";	-- JEQ @DISPLAYATUALIZADO5
tmp(204) := CEQ & '0' & x"11";	-- CEQ @17 	#Compara com 12
tmp(205) := JEQ & '1' & x"62";	-- JEQ @DISPLAYATUALIZADO5
tmp(206) := CEQ & '0' & x"12";	-- CEQ @18 	#Compara com 13
tmp(207) := JEQ & '1' & x"62";	-- JEQ @DISPLAYATUALIZADO5
tmp(208) := CEQ & '0' & x"13";	-- CEQ @19 	#Compara com 14
tmp(209) := JEQ & '1' & x"62";	-- JEQ @DISPLAYATUALIZADO5
tmp(210) := CEQ & '0' & x"14";	-- CEQ @20 	#Compara com 15
tmp(211) := JEQ & '1' & x"62";	-- JEQ @DISPLAYATUALIZADO5
tmp(212) := NOP & '0' & x"00";	-- NOP 
tmp(213) := STA & '1' & x"25";	-- STA @293 	# Hex 5
tmp(214) := LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(215) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1
tmp(216) := JEQ & '0' & x"C3";	-- JEQ @ESPERACENTENAMILHAR 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(217) := STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(218) := LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(219) := STA & '0' & x"0E";	-- STA @14 	#Armazena o valor das chaves no limite das centenas de milhar
tmp(220) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(221) := NOP & '0' & x"00";	-- NOP 
tmp(222) := STA & '1' & x"FF";	-- STA @511 	#Limpa a leitura de KEY1
tmp(223) := NOP & '0' & x"00";	-- NOP 
tmp(224) := LDA & '0' & x"00";	-- LDA @0 	#Carrega o valor da unidade no acumulador
tmp(225) := SOMA & '0' & x"07";	-- SOMA @7     	#Incrementa 1 na unidade
tmp(226) := CEQ & '0' & x"08";	-- CEQ @8      	#Compara unidade com 10
tmp(227) := JEQ & '0' & x"E7";	-- JEQ @UNIDADEPASSOU  	#Se for igual a 10, incrementa a dezena
tmp(228) := STA & '0' & x"00";	-- STA @0 	#Se for diferente de 10, armazena o valor da unidade
tmp(229) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(230) := NOP & '0' & x"00";	-- NOP 
tmp(231) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(232) := STA & '0' & x"00";	-- STA @0 	#Zera a unidade
tmp(233) := LDA & '0' & x"01";	-- LDA @1 	#Carrega o valor da dezena no acumulador
tmp(234) := SOMA & '0' & x"07";	-- SOMA @7     	#Incrementa 1 na dezena 
tmp(235) := CEQ & '0' & x"08";	-- CEQ @8      	#Compara dezena com 10
tmp(236) := JEQ & '0' & x"F0";	-- JEQ @DEZENAPASSOU 	#Se for igual a 10, incrementa a centena
tmp(237) := STA & '0' & x"01";	-- STA @1 	#Se for diferente de 10, armazena o valor da dezena
tmp(238) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(239) := NOP & '0' & x"00";	-- NOP 
tmp(240) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(241) := STA & '0' & x"01";	-- STA @1 	#Zera a dezena
tmp(242) := LDA & '0' & x"02";	-- LDA @2 	#Carrega o valor da centena no acumulador
tmp(243) := SOMA & '0' & x"07";	-- SOMA @7     	#Incrementa 1 na centena
tmp(244) := CEQ & '0' & x"08";	-- CEQ @8      	#Compara centena com 10
tmp(245) := JEQ & '0' & x"F9";	-- JEQ @CENTENAPASSOU 	#Se for igual a 10, incrementa a unidade de milhar
tmp(246) := STA & '0' & x"02";	-- STA @2 	#Se for diferente de 10, armazena o valor da centena
tmp(247) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(248) := NOP & '0' & x"00";	-- NOP 
tmp(249) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(250) := STA & '0' & x"02";	-- STA @2 	#Zera a centena
tmp(251) := LDA & '0' & x"03";	-- LDA @3 	#Carrega o valor da unidade de milhar no acumulador
tmp(252) := SOMA & '0' & x"07";	-- SOMA @7 	#Incrementa 1 na unidade de milhar
tmp(253) := CEQ & '0' & x"08";	-- CEQ @8  	#Compara unidade de milhar com 10
tmp(254) := JEQ & '1' & x"02";	-- JEQ @UNIDADEMILHARPASSOU 	#Se for igual a 10, incrementa a dezena de milhar
tmp(255) := STA & '0' & x"03";	-- STA @3 	#Se for diferente de 10, armazena o valor da unidade de milhar
tmp(256) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(257) := NOP & '0' & x"00";	-- NOP 
tmp(258) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(259) := STA & '0' & x"03";	-- STA @3 	#Zera a unidade de milhar
tmp(260) := LDA & '0' & x"04";	-- LDA @4 	#Carrega o valor da dezena de milhar no acumulador
tmp(261) := SOMA & '0' & x"07";	-- SOMA @7 	#Incrementa 1 na dezena de milhar
tmp(262) := CEQ & '0' & x"08";	-- CEQ @8  	#Compara dezena de milhar com 10
tmp(263) := JEQ & '1' & x"0B";	-- JEQ @DEZENAMILHARPASSOU 	#Se for igual a 10, incrementa a centena de milhar
tmp(264) := STA & '0' & x"04";	-- STA @4 	#Se for diferente de 10, armazena o valor da dezena de milhar
tmp(265) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(266) := NOP & '0' & x"00";	-- NOP 
tmp(267) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(268) := STA & '0' & x"04";	-- STA @4 	#Zera a dezena de milhar
tmp(269) := LDA & '0' & x"05";	-- LDA @5 	#Carrega o valor da centena de milhar no acumulador
tmp(270) := SOMA & '0' & x"07";	-- SOMA @7 	#Incrementa 1 na centena de milhar
tmp(271) := CEQ & '0' & x"08";	-- CEQ @8  	#Compara centena de milhar com 10
tmp(272) := JEQ & '1' & x"14";	-- JEQ @CENTENAMILHARPASSOU 	#Se for igual a 10, incrementa a unidade de milhao
tmp(273) := STA & '0' & x"05";	-- STA @5 	#Se for diferente de 10, armazena o valor da centena de milhar
tmp(274) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(275) := NOP & '0' & x"00";	-- NOP 
tmp(276) := LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(277) := STA & '0' & x"05";	-- STA @5 	#Zera a centena de milhar
tmp(278) := LDI & '0' & x"01";	-- LDI $1 	#Carrega 1 no acumulador
tmp(279) := STA & '1' & x"02";	-- STA @258 	#Acende o LED(9)
tmp(280) := STA & '0' & x"0F";	-- STA @15 	#Ativa a flag de inibir incremento
tmp(281) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(282) := NOP & '0' & x"00";	-- NOP  	#Atualiza os valores dos HEX
tmp(283) := LDA & '0' & x"00";	-- LDA @0 	#Le o valor das unidades
tmp(284) := STA & '1' & x"20";	-- STA @288 	#Armazena o valor das unidades no HEX0
tmp(285) := LDA & '0' & x"01";	-- LDA @1 	#Le o valor das dezenas
tmp(286) := STA & '1' & x"21";	-- STA @289 	#Armazena o valor das dezenas no HEX1
tmp(287) := LDA & '0' & x"02";	-- LDA @2 	#Le o valor das centenas
tmp(288) := STA & '1' & x"22";	-- STA @290 	#Armazena o valor das centenas no HEX2
tmp(289) := LDA & '0' & x"03";	-- LDA @3 	#Le o valor das unidades de milhar
tmp(290) := STA & '1' & x"23";	-- STA @291 	#Armazena o valor das unidades de milhar no HEX3
tmp(291) := LDA & '0' & x"04";	-- LDA @4 	#Le o valor das dezenas de milhar
tmp(292) := STA & '1' & x"24";	-- STA @292 	#Armazena o valor das dezenas de milhar no HEX4
tmp(293) := LDA & '0' & x"05";	-- LDA @5 	#Le o valor das centenas de milhar
tmp(294) := STA & '1' & x"25";	-- STA @293 	#Armazena o valor das centenas de milhar no HEX5
tmp(295) := RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(296) := NOP & '0' & x"00";	-- NOP 
tmp(297) := LDA & '0' & x"00";	-- LDA @0 	#Le o valor das unidades
tmp(298) := CEQ & '0' & x"09";	-- CEQ @9 	# Compara com o valor limite das unidades
tmp(299) := JEQ & '1' & x"2E";	-- JEQ @CHECADEZENA 	#Se for igual, checa se ocorre com as dezenas
tmp(300) := RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(301) := NOP & '0' & x"00";	-- NOP 
tmp(302) := LDA & '0' & x"01";	-- LDA @1 	#Le o valor das dezenas
tmp(303) := CEQ & '0' & x"0A";	-- CEQ @10 	#Compara com o valor limite das dezenas
tmp(304) := JEQ & '1' & x"33";	-- JEQ @CHECACENTENA 	#Se for igual, checa se ocorre com as centenas
tmp(305) := RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(306) := NOP & '0' & x"00";	-- NOP 
tmp(307) := LDA & '0' & x"02";	-- LDA @2 	#Le o valor das centenas
tmp(308) := CEQ & '0' & x"0B";	-- CEQ @11 	#Compara com o valor limite das centenas
tmp(309) := JEQ & '1' & x"38";	-- JEQ @CHECAUNIDADEMILHAR 	#Se for igual, checa se ocorre com as unidades de milhar
tmp(310) := RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(311) := NOP & '0' & x"00";	-- NOP 
tmp(312) := LDA & '0' & x"03";	-- LDA @3 	# Le o valor das unidades de milhar
tmp(313) := CEQ & '0' & x"0C";	-- CEQ @12 	# Compara com o valor limite das unidades de milhar 
tmp(314) := JEQ & '1' & x"3D";	-- JEQ @CHECADEZENAMILHAR 	#Se for igual, checa se ocorre com as dezenas de milhar
tmp(315) := RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(316) := NOP & '0' & x"00";	-- NOP 
tmp(317) := LDA & '0' & x"04";	-- LDA @4 	# Le o valor das dezenas de milhar
tmp(318) := CEQ & '0' & x"0D";	-- CEQ @13 	# Compara com o valor limite das dezenas de milhar 
tmp(319) := JEQ & '1' & x"42";	-- JEQ @CHECACENTENAMILHAR 	#Se for igual, checa se ocorre com as centenas de milhar
tmp(320) := RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(321) := NOP & '0' & x"00";	-- NOP 
tmp(322) := LDA & '0' & x"05";	-- LDA @5 	# Le o valor das centenas de milhar
tmp(323) := CEQ & '0' & x"0E";	-- CEQ @14 	# Compara com o valor limite das centenas de milhar 
tmp(324) := JEQ & '1' & x"47";	-- JEQ @BATEUNOLIMITE 	#Se for igual, indica que o limite foi batido
tmp(325) := RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(326) := NOP & '0' & x"00";	-- NOP 
tmp(327) := LDI & '0' & x"01";	-- LDI $1 	#Atribui o valor 1 no acumulador
tmp(328) := STA & '0' & x"0F";	-- STA @15 	#Ativa a flag de parar contagem
tmp(329) := STA & '1' & x"02";	-- STA @258 	#Ativa o LED de limite atingido 
tmp(330) := RET & '0' & x"00";	-- RET 	#Retorna pro LOOP principal
tmp(331) := NOP & '0' & x"00";	-- NOP  	#Trava a contagem
tmp(332) := LDI & '0' & x"01";	-- LDI $1
tmp(333) := STA & '1' & x"00";	-- STA @256
tmp(334) := LDA & '1' & x"64";	-- LDA @356 	#Le o valor do botao FPGA
tmp(335) := CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o botao FPGA
tmp(336) := JEQ & '1' & x"4C";	-- JEQ @TRAVA 	#Se for igual, continua travado
tmp(337) := JMP & '0' & x"00";	-- JMP @RESTART 	#Se for diferente, reinicia a contagem
tmp(338) := NOP & '0' & x"00";	-- NOP 
tmp(339) := LDI & '0' & x"09";	-- LDI $9
tmp(340) := JMP & '0' & x"5B";	-- JMP @TESTE
tmp(341) := NOP & '0' & x"00";	-- NOP 
tmp(342) := LDI & '0' & x"09";	-- LDI $9
tmp(343) := JMP & '0' & x"73";	-- JMP @TESTE2
tmp(344) := NOP & '0' & x"00";	-- NOP 
tmp(345) := LDI & '0' & x"09";	-- LDI $9
tmp(346) := JMP & '0' & x"8B";	-- JMP @TESTE3
tmp(347) := NOP & '0' & x"00";	-- NOP 
tmp(348) := LDI & '0' & x"09";	-- LDI $9
tmp(349) := JMP & '0' & x"A3";	-- JMP @TESTE4
tmp(350) := NOP & '0' & x"00";	-- NOP 
tmp(351) := LDI & '0' & x"09";	-- LDI $9
tmp(352) := JMP & '0' & x"BB";	-- JMP @TESTE5
tmp(353) := NOP & '0' & x"00";	-- NOP 
tmp(354) := LDI & '0' & x"09";	-- LDI $9
tmp(355) := JMP & '0' & x"D5";	-- JMP @TESTE6
